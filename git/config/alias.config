[alias]
	alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
	b = branch -a
	ci = commit
	co = checkout
	cp = cherry-pick
	d = diff
	dc = diff --cached
	di = diff
	dic = diff --cached
	f = fetch --prune
	fs = !git f && git su
	ignore = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 >> .gitignore
	info = remote show origin
	l = log --graph -n 20 --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(green)- %an, %cr%Creset'
	lx = log --graph --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(green)- %an, %cr%Creset'
	ll = log --stat --abbrev-commit
	ln = log --graph -n 20 --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(green)- %an, %cr%Creset' --name-status
	lp = log --oneline -n 20 -p
	ls = log --stat --abbrev-commit -n 1 # display previous log
	s = status --short --branch --ignore-submodule=dirty
	st = status
	su = submodule update --recursive 
	sfor = "!f(){ git submodule foreach --recursive $*;};f"
	bb = !git show-branch 2>/dev/null | grep '*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -1 | awk -F'[]~^[]' '{print $2}'
	brv = !git show-branch --merge-base `git bb`
	rib = !git rebase -i `git brv`
	zip = archive --format=zip
	export = "!f(){ rm -rf $1; mkdir $1 && git checkout-index -a --prefix=$1/;};f"
	resetfile = co HEAD --
	filereload = !git rm --cached -r . && git reset --hard
	addx = update-index --add --chmod=+x
	chmod = "!f(){ cd ${GIT_PREFIX:-.} && git update-index --add --chmod=$1 ${@:2:($#-1)};};f"
  merged = branch --merged
	delete-merged-branch = !git branch --merged | grep -v \\* | grep / | xargs -I % git branch -d %
	del-merged = delete-merged-branch
  git = !exec git
  br = browse-remote
  pr = browse-remote --pr
  current-branch-name = name-rev --name-only HEAD
  del-squashed-branch = "!f(){ base_branch=${1:-master} && echo ${base_branch} && git checkout -q ${base_branch} && git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base origin/${base_branch} $branch) && [[ $(git cherry origin/${base_branch} $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == "-"* ]] && git branch -D $branch; done; git checkout -q -;};f"
  del-squashed = "!f(){ git del-squashed-branch $1 `git def-branch`;};f"
  del-sq = del-squashed
  def-branch = !git ls-remote --symref origin HEAD | head -n 1 | cut -f 1 | cut -d "/" -f 3-
  untracked = ls-files --others --exclude-standard
